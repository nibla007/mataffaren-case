{
	"info": {
		"_postman_id": "76c2d4e7-609f-45b5-9d59-bba220b4efa9",
		"name": "Willys Standard Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26968382",
		"_collection_link": "https://albinkyh.postman.co/workspace/Mataff%C3%A4ren~c4bf656d-eac4-4c57-bd1a-844ecb13851c/collection/26669808-76c2d4e7-609f-45b5-9d59-bba220b4efa9?action=share&source=collection_link&creator=26968382"
	},
	"item": [
		{
			"name": "Get categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"// Check the status code\r",
							"pm.test('The status code of the response should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// Check that we have a response time of < 1 second\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"\r",
							"// Check that there are at least 10 main categories (children)\r",
							"pm.test('There should be at least 10 main categories', () => {\r",
							"    pm.expect(responseData.children.length).to.be.at.least(10);\r",
							"});\r",
							"\r",
							"pm.test('There should be at least one sub category in each main category - length check', () => {\r",
							"    for (let mainCategory of responseData.children) {\r",
							"    pm.expect(mainCategory.children.length).to.be.greaterThan(0)   \r",
							"}\r",
							"})\r",
							"\r",
							"pm.test('There should be at least one sub category in each main category - not empty check', () => {\r",
							"    for (let mainCategory of responseData.children) {\r",
							"    pm.expect(mainCategory.children).to.not.be.empty;  \r",
							"}\r",
							"})\r",
							"\r",
							"pm.test('Check if the last main category \"lotter\" is empty and is length 0', () => {\r",
							"    let lastMain = responseData.children;\r",
							"    let lotter = lastMain[18].children;\r",
							"    pm.expect(lotter).to.be.empty;\r",
							"    pm.expect(lotter.length).to.be.lessThan(1);\r",
							"});\r",
							"    \r",
							"\r",
							"// Check that each main category has the properties title and url\r",
							"pm.test('Each main category should have the properties title and url and they have the datatype \"string\"', () => {\r",
							"    for(let category of responseData.children) {\r",
							"        pm.expect(category).to.have.property('title')\r",
							"        pm.expect(category).to.have.property('url')\r",
							"        // an empty string is falsy .> convert to false using !!\r",
							"        // a string with content is truthy -> convert to true using!!\r",
							"        pm.expect(!!category.title).to.be.true;\r",
							"        pm.expect(!!category.url).to.be.true;\r",
							"        // Check that datatype is string for both title and url\r",
							"        pm.expect(category.title).to.be.string;\r",
							"        pm.expect(category.url).to.be.string;\r",
							"    }\r",
							"})\r",
							"pm.environment.set('categoryData', JSON.stringify(responseData))\r",
							"\r",
							"// A counter for products within a main category to fetch\r",
							"pm.environment.set('categoryCounter', 0)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set the domain\r",
							"pm.environment.set('domain', 'http://localhost:4000')"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/leftMenu/categorytree",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"leftMenu",
						"categorytree"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get productlist within categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Unpack from JSON all the categories\r",
							"let categories = JSON.parse(pm.environment.get('categoryData'));\r",
							"// Get the category counter and convert to number (using +)\r",
							"let categoryCounter = +pm.environment.get('categoryCounter');\r",
							"\r",
							"// WRite tests!\r",
							"let responseData = pm.response.json();\r",
							"pm.test('The status code of the response should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// Check that we have a response time of < 1 second\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"\r",
							"// Check that we have at least one product in the main category\r",
							"pm.test('There should be at least one product in a main category', () => {\r",
							"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
							"});\r",
							"\r",
							"console.log(responseData)\r",
							"pm.test('There should be at least one sub category in each main category', () => {\r",
							"    pm.expect(responseData.subCategories.length).to.be.at.least(1);\r",
							"});\r",
							"\r",
							"// Repeat/loop this request until we have requested all main categories\r",
							"\r",
							"if (categories.children[categoryCounter]) {\r",
							"    postman.setNextRequest('Get productlist within categories')\r",
							"} else {\r",
							"    pm.environment.set('categoryCounter', 0)\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let categories = JSON.parse(pm.environment.get('categoryData'));\r",
							"let categoryCounter = +pm.environment.get('categoryCounter');\r",
							"let urlCategoryPart = categories.children[categoryCounter].url;\r",
							"pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
							"pm.environment.set('categoryCounter', categoryCounter + 1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=30&page=0&sort=topRated",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"{{urlCategoryPart}}"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "topRated"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test name-asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Unpack from JSON all the categories\r",
							"let categories = JSON.parse(pm.environment.get('categoryData'));\r",
							"// Get the category counter and convert to number (using +)\r",
							"let categoryCounter = +pm.environment.get('categoryCounter');\r",
							"\r",
							"// Write tests!\r",
							"let responseData = pm.response.json();\r",
							"//console.log(responseData.results[0].name);\r",
							"pm.test('The status code of the response should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// Check that we have a response time of < 1 second\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test('First product of each main category should start with either A, B, +, T, 2, 8, 1 or 4', () => {\r",
							"        let firstProduct = responseData.results[0].name;\r",
							"            pm.expect(firstProduct).to.satisfy((productName) => {\r",
							"                return /^[AB+T2814]/.test(productName[0]);\r",
							"        });  \r",
							"});\r",
							"\r",
							"// pm.expect(firstProduct).to.match(/^[ABS+T2814]/);\r",
							"\r",
							"// Repeat/loop this request until we have requested all main categories\r",
							"\r",
							"if(categories.children[categoryCounter]){\r",
							"    postman.setNextRequest('Test name-asc')\r",
							"} else {\r",
							"    pm.environment.set('categoryCounter', 0)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let categories = JSON.parse(pm.environment.get('categoryData'));\r",
							"let categoryCounter = +pm.environment.get('categoryCounter');\r",
							"let urlCategoryPart = categories.children[categoryCounter].url;\r",
							"pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
							"pm.environment.set('categoryCounter', categoryCounter + 1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=30&page=0&sort=name-asc",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"{{urlCategoryPart}}"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "name-asc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test name-desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Unpack from JSON all the categories\r",
							"let categories = JSON.parse(pm.environment.get('categoryData'));\r",
							"// Get the category counter and convert to number (using +)\r",
							"let categoryCounter = +pm.environment.get('categoryCounter');\r",
							"\r",
							"// Write tests!\r",
							"let responseData = pm.response.json();\r",
							"//console.log(responseData.results[0].name);\r",
							"pm.test('The status code of the response should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// Check that we have a response time of < 1 second\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test('First product of each main category should start with either Ö, Ä, Å, V, T or Z', () => {\r",
							"        let firstProduct = responseData.results[0].name;\r",
							"            pm.expect(firstProduct).to.satisfy((productName) => {\r",
							"                return /^[ÖÄÅVTZ]/.test(productName[0]);\r",
							"        });  \r",
							"});\r",
							"\r",
							"// pm.expect(firstProduct).to.match(/^[ABS+T2814]/);\r",
							"\r",
							"// Repeat/loop this request until we have requested all main categories\r",
							"\r",
							"if(categories.children[categoryCounter]){\r",
							"    postman.setNextRequest('Test name-desc')\r",
							"} else {\r",
							"    pm.environment.set('categoryCounter', 0)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let categories = JSON.parse(pm.environment.get('categoryData'));\r",
							"let categoryCounter = +pm.environment.get('categoryCounter');\r",
							"let urlCategoryPart = categories.children[categoryCounter].url;\r",
							"pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
							"pm.environment.set('categoryCounter', categoryCounter + 1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=30&page=0&sort=name-desc",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"{{urlCategoryPart}}"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "name-desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test pastej price-asc",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test('The status code of the response should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// Check that we have a response time of < 1 second\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test('Product prices should be sorted in ascending order (version 1)', () => {\r",
							"    const priceValues = [];\r",
							"    console.log(\"Version 1:\")\r",
							"    for (let product of responseData.results) {\r",
							"        // Add the product's priceValue to the array regardless of its campaign status\r",
							"        priceValues.push(product.priceValue);\r",
							"    }\r",
							"    for (let i = 0; i < priceValues.length - 1; i++) {\r",
							"        a = priceValues[i]\r",
							"        b = priceValues[i + 1]\r",
							"        console.log(`${i}, a: ${a} is less than or equal to b: ${b} `)\r",
							"        pm.expect(a).to.be.lessThanOrEqual(b);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Product prices should be sorted in ascending order (version 2)', () => {\r",
							"    const priceValues = [];\r",
							"    console.log(\"Version 2:\");\r",
							"\r",
							"    for (let i = 0; i < responseData.results.length; i++) {\r",
							"        const product = responseData.results[i];\r",
							"\r",
							"        // Add the product's priceValue to the array\r",
							"        priceValues.push(product.priceValue);\r",
							"    }\r",
							"\r",
							"    let isSorted = true;\r",
							"    for (let i = 0; i < priceValues.length - 1; i++) {\r",
							"        // Check if the current product is on a campaign\r",
							"        const isOnCampaign = product => product.potentialPromotions.some(promotion => promotion.applied === false);\r",
							"\r",
							"        // If the current product and the next product are on campaign, continue to the next iteration\r",
							"        if (isOnCampaign(responseData.results[i]) && isOnCampaign(responseData.results[i + 1])) {\r",
							"            continue;\r",
							"        }\r",
							"\r",
							"        // If the prices are not in ascending order, fail the test\r",
							"        if (priceValues[i] > priceValues[i + 1]) {\r",
							"            console.log(\"The price it failed on: \" + priceValues[i]);\r",
							"            isSorted = false;\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"\r",
							"    // Log the priceValues array\r",
							"    console.log(\"The list of product prices\");\r",
							"    console.log(priceValues);\r",
							"\r",
							"    // Assert that the prices are sorted in ascending order\r",
							"    pm.expect(isSorted).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/c/kott-chark-och-fagel/palagg/pastej-och-pat-?size=30&page=0&sort=price-asc",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"c",
						"kott-chark-och-fagel",
						"palagg",
						"pastej-och-pat-"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "price-asc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test pastej price-desc",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test('The status code of the response should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// Check that we have a response time of < 1 second\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test('Product prices should be sorted in descending order (version 1)', () => {\r",
							"    const priceValues = [];\r",
							"    console.log(\"Version 1:\")\r",
							"\r",
							"    for (let product of responseData.results) {\r",
							"        // Add the product's priceValue to the array regardless of its campaign status\r",
							"        priceValues.push(product.priceValue);\r",
							"    }\r",
							"    for (let i = 0; i < priceValues.length - 1; i++) {\r",
							"        a = priceValues[i]\r",
							"        b = priceValues[i + 1]\r",
							"        console.log(`${i}, a: ${a} is greater than or equal to b: ${b} `)\r",
							"        pm.expect(a).to.be.greaterThanOrEqual(b);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Product prices should be sorted in descending order (version 2)', () => {\r",
							"    const priceValues = [];\r",
							"    console.log(\"Version 2:\");\r",
							"\r",
							"    for (let i = 0; i < responseData.results.length; i++) {\r",
							"        const product = responseData.results[i];\r",
							"\r",
							"        // Add the product's priceValue to the array\r",
							"        priceValues.push(product.priceValue);\r",
							"    }\r",
							"\r",
							"    let isSorted = true;\r",
							"    for (let i = 0; i < priceValues.length - 1; i++) {\r",
							"        // Check if the current product is on a campaign\r",
							"        const isOnCampaign = product => product.potentialPromotions.some(promotion => promotion.applied === false);\r",
							"\r",
							"        // If the current product and the next product are on campaign, continue to the next iteration\r",
							"        if (isOnCampaign(responseData.results[i]) && isOnCampaign(responseData.results[i + 1])) {\r",
							"            continue;\r",
							"        }\r",
							"\r",
							"        // If the prices are not in descending order, fail the test\r",
							"        if (priceValues[i] < priceValues[i + 1]) {\r",
							"            console.log(\"The price it failed on: \" + priceValues[i]);\r",
							"            isSorted = false;\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"    console.log(\"The list of product prices\")\r",
							"    console.log(priceValues);\r",
							"\r",
							"    // Assert that the prices are sorted in descending order\r",
							"    pm.expect(isSorted).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/c/kott-chark-och-fagel/palagg/pastej-och-pat-?size=30&page=0&sort=price-desc",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"c",
						"kott-chark-och-fagel",
						"palagg",
						"pastej-och-pat-"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "price-desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test pastej compareprice-asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test('The status code of the response should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// Check that we have a response time of < 1 second\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test('Product comparePrices should be sorted in ascending order', () => {\r",
							"    const comparePriceValues = [];\r",
							"\r",
							"    for (let product of responseData.results) {\r",
							"        // Add the product's to the comparePriceValues array\r",
							"        // And change it to a float value first\r",
							"        const cleanedPrice = product.comparePrice.replace(/[^0-9,]/g, '').replace(',', '.');\r",
							"        \r",
							"        // Parse the product's comparePrice to a float value\r",
							"        const parsedFloatValue = parseFloat(cleanedPrice);\r",
							"\r",
							"        comparePriceValues.push(parsedFloatValue);\r",
							"    }\r",
							"\r",
							"    for (let i = 0; i < comparePriceValues.length - 1; i++) {\r",
							"        a = comparePriceValues[i]\r",
							"        b = comparePriceValues[i + 1]\r",
							"        // console log that clearly shows that a is less than b\r",
							"        console.log(`${i}, a: ${a} is less than or equal to b: ${b} `)\r",
							"        // If a is is lessThanOrEqual to b it will pass\r",
							"        pm.expect(a).to.be.lessThanOrEqual(b);\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/c/frukt-och-gront/frukt?size=30&page=0&sort=compareprice-asc",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"c",
						"frukt-och-gront",
						"frukt"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "compareprice-asc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test pastej compareprice-desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test('The status code of the response should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// Check that we have a response time of < 1 second\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test('Product comparePrices should be sorted in descending order', () => {\r",
							"    const comparePriceValues = [];\r",
							"\r",
							"    for (let product of responseData.results) {\r",
							"        // Add the product's to the comparePriceValues array\r",
							"        // And change it to a float value first\r",
							"        const cleanedPrice = product.comparePrice.replace(/[^0-9,]/g, '').replace(',', '.');\r",
							"        \r",
							"        // Parse the product's comparePrice to a float value\r",
							"        const parsedFloatValue = parseFloat(cleanedPrice);\r",
							"\r",
							"        comparePriceValues.push(parsedFloatValue);\r",
							"    }\r",
							"    console.log(comparePriceValues);\r",
							"    for (let i = 0; i < comparePriceValues.length - 1; i++) {\r",
							"        a = comparePriceValues[i]\r",
							"        b = comparePriceValues[i + 1]\r",
							"        // A console log to clearly shows that b is less than a\r",
							"        console.log(`${i}, a: ${a} is greater than or equal to b: ${b} `)\r",
							"        // If b is is lessThanOrEqual to a it will pass\r",
							"        pm.expect(a).to.be.greaterThanOrEqual(b);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/c/frukt-och-gront/frukt?size=30&page=0&sort=compareprice-desc",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"c",
						"frukt-och-gront",
						"frukt"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "compareprice-desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('The status code of the response should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// Check that we have a response time of < 1 second\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Pagination is implemented and working\", function () {\r",
							"    try {\r",
							"        // Parse the response JSON\r",
							"        const parsedData = pm.response.json();\r",
							"\r",
							"        // Check if 'pagination' property exists\r",
							"        pm.expect(parsedData).to.have.property('pagination');\r",
							"\r",
							"        const pagination = parsedData.pagination;\r",
							"\r",
							"        // Check if pagination properties exist\r",
							"        pm.expect(pagination).to.have.property('pageSize');\r",
							"        pm.expect(pagination).to.have.property('currentPage');\r",
							"        pm.expect(pagination).to.have.property('sort');\r",
							"        pm.expect(pagination).to.have.property('numberOfPages');\r",
							"        pm.expect(pagination).to.have.property('totalNumberOfResults');\r",
							"        pm.expect(pagination).to.have.property('allProductsInCategoriesCount');\r",
							"        pm.expect(pagination).to.have.property('allProductsInSearchCount');\r",
							"\r",
							"        // Check if 'currentPage' is within a valid range\r",
							"        pm.expect(pagination.currentPage).to.be.at.least(0);\r",
							"        pm.expect(pagination.currentPage).to.be.at.most(pagination.numberOfPages);\r",
							"\r",
							"        // Check if 'numberOfPages' is a positive integer\r",
							"        pm.expect(pagination.numberOfPages).to.be.an('number');\r",
							"        pm.expect(pagination.numberOfPages).to.be.at.least(1);\r",
							"\r",
							"        // Check if 'totalNumberOfResults' is a non-negative integer\r",
							"        pm.expect(pagination.totalNumberOfResults).to.be.an('number');\r",
							"        pm.expect(pagination.totalNumberOfResults).to.be.at.least(1);\r",
							"\r",
							"        // Check if 'allProductsInCategoriesCount' is a non-negative integer\r",
							"        pm.expect(pagination.allProductsInCategoriesCount).to.be.an('number');\r",
							"        pm.expect(pagination.allProductsInCategoriesCount).to.be.at.least(1);\r",
							"\r",
							"        // Check if 'allProductsInSearchCount' is a non-negative integer\r",
							"        pm.expect(pagination.allProductsInSearchCount).to.be.an('number');\r",
							"        pm.expect(pagination.allProductsInSearchCount).to.be.at.least(0);\r",
							"\r",
							"        // Check for valid sorting parameter\r",
							"        pm.expect([\"topRated\"]).to.include(pagination.sort);\r",
							"\r",
							"        // Check for consistency between 'numberOfPages' and 'totalNumberOfResults' based on 'pageSize' and 'currentPage'\r",
							"        pm.expect(pagination.numberOfPages * pagination.pageSize).to.be.at.least(pagination.totalNumberOfResults);\r",
							"\r",
							"        // Check if the sum of 'allProductsInCategoriesCount' and 'allProductsInSearchCount' equals 'totalNumberOfResults'\r",
							"        pm.expect(pagination.allProductsInCategoriesCount + pagination.allProductsInSearchCount).to.equal(pagination.totalNumberOfResults);\r",
							"\r",
							"        // Check if 'pageSize' is a positive integer and within a realistic range\r",
							"        pm.expect(pagination.pageSize).to.be.an('number');\r",
							"        pm.expect(pagination.pageSize).to.be.at.least(1);\r",
							"        pm.expect(pagination.pageSize).to.be.at.most(100);\r",
							"\r",
							"    } catch (error) {\r",
							"        console.error('Error parsing JSON:', error.message);\r",
							"        pm.test('JSON Parsing Error', function () {\r",
							"            pm.expect.fail('Error parsing JSON');\r",
							"        });\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/c/kott-chark-och-fagel/kott?size=30&page=0&sort=topRated",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"c",
						"kott-chark-och-fagel",
						"kott"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "topRated"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
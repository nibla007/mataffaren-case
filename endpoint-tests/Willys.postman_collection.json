{
	"info": {
		"_postman_id": "00a4c935-44bc-425a-8cfc-8c4bf33523eb",
		"name": "Willys",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26968382",
		"_collection_link": "https://www.postman.com/aviation-engineer-97338859/workspace/my-workspace/collection/26968382-00a4c935-44bc-425a-8cfc-8c4bf33523eb?action=share&source=collection_link&creator=26968382"
	},
	"item": [
		{
			"name": "Get categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"\r",
							"// Check that there are at least 10 main categories (children)\r",
							"pm.test('There should be at least 10 main categories', () => {\r",
							"    pm.expect(responseData.children.length).to.be.at.least(19);\r",
							"});\r",
							"\r",
							"// Check the status code\r",
							"\r",
							"pm.test('The status code of the response should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// Check that we have a response time of < 1 second\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"\r",
							"// Check that each main category has the properties title and url\r",
							"pm.test('Each main category should have the properties title and url and they have the datatype \"string\"', () => {\r",
							"    for(let category of responseData.children) {\r",
							"        // an empty string is falsy .> convert to false using !!\r",
							"        // a string with content is truthy -> convert to true using!!\r",
							"        pm.expect(!!category.title).to.be.true;\r",
							"        pm.expect(!!category.url).to.be.true;\r",
							"        // Check that datatype is string for both title and url\r",
							"        pm.expect(category.title).to.be.string;\r",
							"        pm.expect(category.url).to.be.string;\r",
							"    }\r",
							"})\r",
							"pm.environment.set('categoryData', JSON.stringify(responseData))\r",
							"\r",
							"// A counter for products within a main category to fetch\r",
							"pm.environment.set('categoryCounter', 0)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set the domain\r",
							"pm.environment.set('domain', 'http://localhost:4000')"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/leftMenu/categorytree",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"leftMenu",
						"categorytree"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get productlist within categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Unpack from JSON all the categories\r",
							"let categories = JSON.parse(pm.environment.get('categoryData'));\r",
							"// Get the category counter and convert to number (using +)\r",
							"let categoryCounter = +pm.environment.get('categoryCounter');\r",
							"\r",
							"// WRite tests!\r",
							"let responseData = pm.response.json();\r",
							"pm.test('The status code of the response should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// Check that we have a response time of < 1 second\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"\r",
							"// Check that we have at least one product in the main category\r",
							"pm.test('There should be at least one product in a main category', () => {\r",
							"    pm.expect(responseData.results.length).to.be.at.least(1);\r",
							"    });\r",
							"\r",
							"// Repeat/loop this request until we have requested all main categories\r",
							"\r",
							"if(categories.children[categoryCounter]){\r",
							"    postman.setNextRequest('Get productlist within categories')\r",
							"} else {\r",
							"    pm.environment.set('categoryCounter', 0)\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let categories = JSON.parse(pm.environment.get('categoryData'));\r",
							"let categoryCounter = +pm.environment.get('categoryCounter');\r",
							"let urlCategoryPart = categories.children[categoryCounter].url;\r",
							"pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
							"pm.environment.set('categoryCounter', categoryCounter + 1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=30&page=0&sort=topRated",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"{{urlCategoryPart}}"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "topRated"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get productlist within main category sorting",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Unpack from JSON all the categories\r",
							"let categories = JSON.parse(pm.environment.get('categoryData'));\r",
							"// Get the category counter and convert to number (using +)\r",
							"let categoryCounter = +pm.environment.get('categoryCounter');\r",
							"\r",
							"// Write tests!\r",
							"let responseData = pm.response.json();\r",
							"//console.log(responseData.results[0].name);\r",
							"pm.test('The status code of the response should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// Check that we have a response time of < 1 second\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test('First product of each main category should start with either A, B, +, T, 2, 8, 1 or 4', () => {\r",
							"        let firstProduct = responseData.results[0].name;\r",
							"        //if (typeof firstProduct === 'string' && /^[AB+T2814]/.test(firstProduct[0])) {\r",
							"            console.log(firstProduct);\r",
							"            pm.expect(firstProduct).to.satisfy((productName) => {\r",
							"                return /^[AB+T2814]/.test(productName[0]);\r",
							"            });  \r",
							"        //} else {\r",
							"            //console.log(`This product does not start with an A, B, +, T, 2, 8, 1 or 4, the product is ${firstProduct}`);\r",
							"        //}\r",
							"});\r",
							"\r",
							"// Repeat/loop this request until we have requested all main categories\r",
							"\r",
							"if(categories.children[categoryCounter]){\r",
							"    postman.setNextRequest('Get productlist within main category sorting')\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let categories = JSON.parse(pm.environment.get('categoryData'));\r",
							"let categoryCounter = +pm.environment.get('categoryCounter');\r",
							"let urlCategoryPart = categories.children[categoryCounter].url;\r",
							"pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
							"pm.environment.set('categoryCounter', categoryCounter + 1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=30&page=0&sort=name-asc",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"{{urlCategoryPart}}"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "name-asc"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}